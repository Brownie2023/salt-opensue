Vagrant openSUSE SaltStack

1. Installed Vagrant 1.8.7 for OS X from https://www.vagrantup.com/
2. Cloned  https://github.com/UtahDave/salt-vagrant-demo
3. ran 'vagrant up' and received errors:
  - /opt/vagrant/embedded/gems/gems/vagrant-1.8.7/plugins/provisioners/salt/provisioner.rb:9: warning: wrong element type String at 0 (expected array)
    /opt/vagrant/embedded/gems/gems/vagrant-1.8.7/plugins/provisioners/salt/provisioner.rb:9: warning: ignoring wrong elements is deprecated, remove them explicitly
    ...
4. Fixed by downgrading to Vagrant 1.8.6
  - Remember to remove /opt/vagrant on OS X (vagrant should include this in their docs)
5. Ran 'vagrant up'
  - SUCCESS
5.1 - decided to move over to my windows desktop and run opensuse servers in vagrant
  - installed vagrant 1.8.6
  - switched Vagrantfile master_config.vm.box && minion_config.vm.box to "bento/opensuse-leap-42.1"
  - ran 'vagrant up'
  - used putty to ssh into master and minions
6. /var/log/salt/master && /var/cache/salt permission issues running salt commands
  - rather than dealing with permissions I just switched to su
7. ssh into master & minions:
  master - ssh 192.168.50.10 -l vagrant
  minion1 - ssh 192.168.50.11 -l vagrant
  minion2 - ssh 192.168.50.12 -l vagrant
8. nettools.sls && examples.sls created while going over the tutorial @ https://docs.saltstack.com/en/getstarted/fundamentals/index.html
9. THE GOAL:
  - create a web app on server(minion1) that connects to a separate db server(minion2)
10. web_services.web_services.sls:
  - need to automate the install of apache and pythons pip
  - pip needs to install the flask and sqlalchemy packages for out to-do app
11. web_services.vhost.sls:
  - push example_site.conf file for virtual host to /etc/apache2/vhost.d/
12. web_services.site.sls:
  - push flask app(site dir) to /srv/www/htdocs/
13. postgres.postgres_service.sls:
  - install postgres 9.4 server and run service
  - need to automate setting up new user and db for app
14. Was getting an apache is running but dead error. SSH'd into minion1 and found that there was a syntax error in my eample.conf file by running 'sudo systemctl status httpd.service'
15. Added 192.168.50.11 www.todosuse.com to my local hosts (\Windows\System32\drivers\etc\hosts) file so I can go to the url in browser rather than ip
16. edited postgresql.conf to listen on '*' and run on port 5432 and pg_hba.conf to allow connections from windows descktop and minion1.
  - pg_hba.conf is giving me some errors right now causing postgres to be dead
  - for some reason all I need to do was add the subnet mask.
17. Starting to build to do app
  - need to automate creating the todo table with python
    columns: title(string)    complete(bool)    date_created(date)    date_completed(date)
  - models.py - models my todo list table
  - create_db.py - creates table from models & creates an initial todo for my app
  - todoapp.py - this is my flask app
18. I need psycopg2 to be able to run this app and I cannoot get it installed via salt to save my life!!!!!!!
  - restarting servers for some reason finally allowed postgresql94-develpackage to be installed. I was getting some oss error earlier
19. salt 'minion1' state.apply postgres.create_db - this creates the relation for out app in inserts an initial tuple
20. Got my app built using Flask, SQLAlchemy, psycopg2, Flask_Restless, AngularJS, Postgres
21. web_services.run_site.sls - starts the flask app for us!

Note: Was getting a:
    psql: could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket "/var/run/postgresql/.s.PGSQL.5432"?
    error earlier. There was some timing issues I believe with running postgres initdb command.
    Some postgres.postgres_service.sls changes based on https://github.com/pgexperts/saltstack-talk-examples/blob/master/srvsalt/02-postgresql/postgresql/init.sls
    helped a lot.

To-run:
vagrant up
master: su
master: salt '*' state.apply
master: salt 'minion1' state.apply postgres.create_db
master: salt 'minion1' state.apply web_services.run_site
navigate to 192.168.50.11 in a local network web browser
